Here is a high-level approach to implement the image rotation with mouse in Python using PyQt5 and PIL:

# Imports
from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QLabel, QPushButton
from PyQt5.QtGui import QImage, QMouseEvent, QTransform
from PyQt5.QtCore import Qt, QEvent
from PIL import Image, ImageQt

class Window(QWidget):
   def __init__(self):
       # Initial PyQt5 setup
       ...

       # Initialize PIL image
       self.rotated_img = None

       # Create labels
       self.image_label = QLabel(self)
       self.rotated_label = QLabel(self)

       ...

   def mousePressEvent(self, event: QMouseEvent):
       # Get mouse press position
       self.press_pos = event.pos()
       self.mouse_down = True

   def mouseReleaseEvent(self, event: QMouseEvent):
       self.mouse_down = False

   def mouseMoveEvent(self, event: QMouseEvent) -> None:
       if self.mouse_down:
           # Calculate angle of rotation
           angle = self.calculate_angle(event.pos(), self.press_pos)

           # Rotate PIL image
           self.rotated_img = self.apply_rotation(self.image, angle)

           # Update UI
           self.rotated_label.setPixmap(QPixmap(ImageQt(self.rotated_img)).scaledToWidth(300))

   def calculate_angle(self, pos, press_pos):
       # Calculate angle based on mouse delta
       return -(pos.x() - press_pos.x()) / (abs(pos.y() - press_pos.y()) + 1e-10)

   def apply_rotation(self, img, angle):
       # Rotate PIL image with the given angle
       rotated = img.rotate(angle)
       return rotated.resize(img.size, Image.BILINEAR)

   ...
You
write Python code with PyQt5 and PIL for load image from file, then rotate it with mouse on some angle and save result to new file

AI
You
write Python code with PyQt5 and PIL for load image from file, then rotate it with mouse on some angle and save result to new file. I have part of this code^

Imports
from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QLabel, QPushButton

from PyQt5.QtGui import QImage, QMouseEvent, QTransform

from PyQt5.QtCore import Qt, QEvent

from PIL import Image, ImageQt

class Window(QWidget):

def init(self):

   # Initial PyQt5 setup

   ...



   # Initialize PIL image

   self.rotated_img = None



   # Create labels

   self.image_label = QLabel(self)

   self.rotated_label = QLabel(self)



   ...
def mousePressEvent(self, event: QMouseEvent):

   # Get mouse press position

   self.press_pos = event.pos()

   self.mouse_down = True
def mouseReleaseEvent(self, event: QMouseEvent):

   self.mouse_down = False
def mouseMoveEvent(self, event: QMouseEvent) -> None:

   if self.mouse_down:

       # Calculate angle of rotation

       angle = self.calculate_angle(event.pos(), self.press_pos)



       # Rotate PIL image

       self.rotated_img = self.apply_rotation(self.image, angle)



       # Update UI

       self.rotated_label.setPixmap(QPixmap(ImageQt(self.rotated_img)).scaledToWidth(300))
def calculate_angle(self, pos, press_pos):

   # Calculate angle based on mouse delta

   return -(pos.x() - press_pos.x()) / (abs(pos.y() - press_pos.y()) + 1e-10)
def apply_rotation(self, img, angle):

   # Rotate PIL image with the given angle

   rotated = img.rotate(angle)

   return rotated.resize(img.size, Image.BILINEAR)
AI
Here is how you can save the rotated image to a new file after completing the rotation:

# Add these methods to the Window class
def save_rotated_image(self):
   # Get file path to save
   fileName, _ = QFileDialog.getSaveFileName(self, 'Save Image', '', 'Image Files (*.png *.jpg *.bmp)')

   if fileName:
       self.rotated_img.save(fileName, 'JPEG')
       print(f"Image saved to {fileName}")

def closeEvent(self, event):
   self.save_rotated_image()
   super().closeEvent(event)
The save_rotated_image method uses QFileDialog to let the user choose a file to save, then calls save on the PIL image to save the rotated version to the chosen filepath. Make sure to call this method before closing the window in the closeEvent to capture the final rotated image.

Let me know if you need any clarification or have additional questions!

You
can you add the buttons for load and save?

AI
Sure, here is how you can add buttons for loading an image and saving the rotated image in the PyQt5 UI:

# In the Window constructor
...

# Create widgets
self.load_btn = QPushButton("Load Image", self)
self.save_btn = QPushButton("Save Rotated", self)

# Layout
horizontal_layout = QHBoxLayout()
horizontal_layout.addWidget(self.load_btn)
horizontal_layout.addWidget(self.save_btn)
self.image_label.setLayout(horizontal_layout)  # To align buttons with image

# Connect signals to slots
self.load_btn.clicked.connect(self.load_image)
self.save_btn.clicked.connect(self.save_rotated_image)
The load_btn triggers a load_image method that would open a file dialog to choose an image and update self.image with the loaded PIL image. The save_btn connects to the existing save_rotated_image method to save the rotated image upon click.

The layout ensures the buttons are aligned with the image displayed in the image_label. Let me know if you have any other questions!

Show controls (Ctrl+S)
â˜°
